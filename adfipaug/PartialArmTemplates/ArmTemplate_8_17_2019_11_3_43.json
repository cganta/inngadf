{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "adfipaug"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyBlobToTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBlobToTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Email",
											"type": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MobileNo",
											"type": "String"
										},
										"sink": {
											"name": "MobileNo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_EmployeeBlob",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "DS_EmployeeTable",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Stored Procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyBlobToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_Insert_Users_Blobs_Log]",
							"storedProcedureParameters": {
								"BlobName": {
									"value": {
										"value": "@pipeline().parameters.Pram_BlobName",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileSize": {
									"value": {
										"value": "@pipeline().parameters.Pram_BlobSize",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ProcessedDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ProcessStatus": {
									"value": {
										"value": "'Success'",
										"type": "Expression"
									},
									"type": "String"
								},
								"RowsRead": {
									"value": {
										"value": "@activity('CopyBlobToTable').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RowsWriten": {
									"value": {
										"value": "@activity('CopyBlobToTable').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_azsqlpreprod",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"Pram_BlobName": {
						"type": "string"
					},
					"Pram_BlobSize": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataActivityAudit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetMetadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_EmployeeBlob",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists",
								"size",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfCondition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetMetadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('GetMetadata1').output.exists,greater(activity('GetMetadata1').output.size,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyDataActivityAudit",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyBlobToTable",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Pram_BlobName": {
												"value": "@activity('GetMetadata1').output.itemName",
												"type": "Expression"
											},
											"Pram_BlobSize": {
												"value": "@activity('GetMetadata1').output.size",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyBlobToTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyOnpremToBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from tblCopyBlobList"
							},
							"dataset": {
								"referenceName": "DS_tblCopyBlobList",
								"type": "DatasetReference",
								"parameters": {
									"DS_Pram_DBName": {
										"value": "@pipeline().parameters.PL_Pram_DBName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('select top 10 * from ',item().TableName)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_tblCopyBlobList",
											"type": "DatasetReference",
											"parameters": {
												"DS_Pram_DBName": {
													"value": "@pipeline().parameters.PL_Pram_DBName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CMSDBBlobs",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@{item().TableName}.csv",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"PL_Pram_DBName": {
						"type": "string",
						"defaultValue": "CMS"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_tblCopyBlobList')]",
				"[concat(variables('factoryId'), '/datasets/DS_CMSDBBlobs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_CMS_Inv_Agg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_CMS_Invoices_Agg",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CMS_Invoices_Agg",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CMS_Invoices_Agg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CMSDBBlobs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_storageaccipaug",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "PRXLDB",
						"container": "employeedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "MobileNo",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tbl_CMS_Invoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_azsqlpreprod",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tbl_CMS_Invoices"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_blb_BranchLocation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_storageaccipaug",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BranchLocation.csv",
						"folderPath": "CMSDB",
						"container": "employeedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BranchKey",
						"type": "String"
					},
					{
						"name": "BranchLocation",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_blb_ChargeCode')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_storageaccipaug",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ChargeCode.csv",
						"folderPath": "CMSDB",
						"container": "employeedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ChargeKey",
						"type": "String"
					},
					{
						"name": "ChargeCode",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_blb_Invoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_storageaccipaug",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Invoices.csv",
						"folderPath": "CMSDB",
						"container": "employeedata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "BranchKey",
						"type": "String"
					},
					{
						"name": "ChargeKey",
						"type": "String"
					},
					{
						"name": "DateKey",
						"type": "String"
					},
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "InvoiceAmt",
						"type": "String"
					},
					{
						"name": "DaysToBill",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_tblCopyBlobList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerOnprem",
					"type": "LinkedServiceReference",
					"parameters": {
						"LS_Pram_DBName": {
							"value": "@dataset().DS_Pram_DBName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DS_Pram_DBName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TableName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblCopyBlobList"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CMS_Invoices_Agg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_blb_Invoices",
								"type": "DatasetReference"
							},
							"name": "Invoice"
						},
						{
							"dataset": {
								"referenceName": "DS_blb_BranchLocation",
								"type": "DatasetReference"
							},
							"name": "BranchLocation"
						},
						{
							"dataset": {
								"referenceName": "DS_blb_ChargeCode",
								"type": "DatasetReference"
							},
							"name": "ChargeCode"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Tbl_CMS_Invoices",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "\n\nsource(output(\n\t\tBranchKey as string,\n\t\tChargeKey as string,\n\t\tDateKey as string,\n\t\tInvoiceNo as string,\n\t\tInvoiceAmt as string,\n\t\tDaysToBill as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Invoice\nsource(output(\n\t\tBranchKey as string,\n\t\tBranchLocation as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> BranchLocation\nsource(output(\n\t\tChargeKey as string,\n\t\tChargeCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> ChargeCode\nInvoice, BranchLocation join(Invoice@BranchKey == BranchLocation@BranchKey,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nJoin1, ChargeCode join(Invoice@ChargeKey == ChargeCode@ChargeKey,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join2\nJoin2 window(over(BranchLocation),\n\tTotalInvoiceAmt = sum(toInteger(InvoiceAmt))) ~> Window1\nWindow1 select(mapColumn(\n\t\tBranchKey = Invoice@BranchKey,\n\t\tChargeKey = Invoice@ChargeKey,\n\t\tDateKey,\n\t\tInvoiceNo,\n\t\tInvoiceAmt,\n\t\tDaysToBill,\n\t\tBranchLocation,\n\t\tChargeCode,\n\t\tTotalInvoiceAmt\n\t)) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_blb_Invoices')]",
				"[concat(variables('factoryId'), '/datasets/DS_blb_BranchLocation')]",
				"[concat(variables('factoryId'), '/datasets/DS_blb_ChargeCode')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tbl_CMS_Invoices')]"
			]
		}
	]
}